# Generated by Django 4.2.1 on 2023-06-29 18:42

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_customer', models.BooleanField(default=False)),
                ('is_restaurant', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('STARTER', 'Starter'), ('OTHER_COURSE', 'Other courses'), ('DESSERT', 'Dessert'), ('DRINK', 'Drink'), ('RICE', 'Rice'), ('PASTA', 'Pasta'), ('MEAT', 'Meat'), ('BURGER', 'Burger'), ('BREAD', 'Bread'), ('PIZZA', 'Pizza'), ('SALAD', 'Salad'), ('TOPPING', 'Topping')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='images/')),
                ('price', models.IntegerField()),
                ('calories', models.IntegerField()),
                ('protein', models.IntegerField()),
                ('carbs', models.IntegerField()),
                ('fat', models.IntegerField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customize.category')),
                ('menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customize.menu')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('username', models.CharField(max_length=100)),
                ('contact', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, related_name='customer_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customer_set', to='auth.permission')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_text', models.TextField()),
                ('rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customize.menuitem')),
                ('customer_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customize.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('username', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('contact', models.CharField(max_length=100)),
                ('image', models.ImageField(blank=True, upload_to='images')),
                ('location', models.CharField(max_length=100)),
                ('opentime', models.TimeField(default=datetime.time(7, 0))),
                ('closetime', models.TimeField(default=datetime.time(23, 0))),
                ('groups', models.ManyToManyField(blank=True, related_name='restaurant_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='restaurant_set', to='auth.permission')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('special_instructions', models.TextField(blank=True)),
                ('order_type', models.CharField(choices=[('TAKE_AWAY', 'Take-away'), ('DINE_IN', 'Dine-in')], max_length=20)),
                ('order_status', models.CharField(choices=[('ORDER_RECEIVED', 'Order received'), ('ORDER_PREPARING', 'Order is being prepared'), ('ORDER_READY', 'Order is ready for you')], default='ORDER_RECEIVED', max_length=20)),
                ('price', models.IntegerField(default=0)),
                ('fat', models.IntegerField(default=0)),
                ('carbs', models.IntegerField(default=0)),
                ('protein', models.IntegerField(default=0)),
                ('calories', models.IntegerField(default=0)),
                ('menu_items', models.ManyToManyField(to='customize.menuitem')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customize.customer')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customize.restaurant')),
            ],
        ),
        migrations.AddField(
            model_name='menu',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customize.restaurant'),
        ),
    ]
